/* Generated by re2c 0.16 */
//-----------------------------------------------------------------------------
// z80asm scanner
// Copyright (c) Paulo Custodio, 2015-2016
// License: http://www.perlfoundation.org/artistic_license_2_0
//-----------------------------------------------------------------------------

#include "memcheck.h"
#include "scanner.h"
#include "message.h"
#include "source.h"
#include <cassert>
#include <cstdlib>
#include <climits>

Token Scanner::eoi_token = Token(TK_EOI);
SrcLine Scanner::default_line = SrcLine(NULL, 0, "");

Scanner::Scanner()
	: line_(NULL), p_(NULL), marker_(NULL), ctxmarker_(NULL)
	, tok_p_(0) {
	init(&default_line);
}

Scanner::~Scanner() {
}

void Scanner::init(SrcLine* line) {
	line_ = line;
	p_ = line->text().c_str();
	marker_ = ctxmarker_ = NULL;
	tokens_.clear();
	tok_p_ = 0;
}

Token* Scanner::peek(int n) {
	assert(n >= 0);

	// fill buffer
	while (tok_p_ + n >= tokens_.size()) {
		if (!push_next())
			return &eoi_token;
	}

	return &tokens_[tok_p_ + n];
}

Token* Scanner::next() {
	Token* tok = peek();
	if (tok_p_ < tokens_.size())
		++tok_p_;
	return tok;
}

int Scanner::get_pos() const {
	return tok_p_;
}

void Scanner::set_pos(int pos) {
	assert(pos >= 0);
	assert(pos <= static_cast<int>(tokens_.size()));
	tok_p_ = pos;
}

void Scanner::error(void(*errfunc)(SrcLine*, int)) {
	int column = (line_ == NULL || p_ == NULL) ? 0 : p_ - line_->text().c_str() + 1;
	errfunc(line_, column);
	flush();
}

void Scanner::warning(void(*errfunc)(SrcLine*, int)) {
	int column = (line_ == NULL || p_ == NULL) ? 0 : p_ - line_->text().c_str() + 1;
	errfunc(line_, column);
}

int Scanner::number(const char* ts, int base) {
	unsigned long value = std::strtoul(ts, NULL, base);
	return static_cast<int>(value);
}



void Scanner::flush() {
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:	goto yy2;
			case '\n':	goto yy6;
			default:	goto yy4;
			}
yy2:
			++p_;
			{ --p_; return; }
yy4:
			++p_;
			{ continue; }
yy6:
			++p_;
			{ return; }
		}

	}
}

bool Scanner::push_next() {
	int hash; 				// build hash of identifiers
	int count;
	bool squote;
	const char* ts;

	for (;;) {
		ts = p_;
		
		{
			char yych;
			unsigned int yyaccept = 0;
			yych = *p_;
			switch (yych) {
			case 0x00:	goto yy10;
			case '\t':
			case '\v':
			case '\f':
			case '\r':
			case ' ':	goto yy14;
			case '\n':
			case '\\':	goto yy16;
			case '!':	goto yy18;
			case '"':	goto yy20;
			case '#':	goto yy22;
			case '$':	goto yy24;
			case '%':	goto yy25;
			case '&':	goto yy27;
			case '\'':	goto yy29;
			case '(':	goto yy31;
			case ')':	goto yy33;
			case '*':	goto yy35;
			case '+':	goto yy37;
			case ',':	goto yy39;
			case '-':	goto yy41;
			case '.':	goto yy43;
			case '/':	goto yy45;
			case '0':	goto yy47;
			case '1':	goto yy49;
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':	goto yy51;
			case ':':	goto yy53;
			case ';':	goto yy55;
			case '<':	goto yy57;
			case '=':	goto yy59;
			case '>':	goto yy61;
			case '?':	goto yy63;
			case '@':	goto yy65;
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'G':
			case 'H':
			case 'I':
			case 'J':
			case 'K':
			case 'L':
			case 'M':
			case 'N':
			case 'O':
			case 'P':
			case 'Q':
			case 'R':
			case 'S':
			case 'T':
			case 'U':
			case 'V':
			case 'W':
			case 'X':
			case 'Y':
			case 'Z':
			case '_':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':
			case 'g':
			case 'h':
			case 'i':
			case 'j':
			case 'k':
			case 'l':
			case 'm':
			case 'n':
			case 'o':
			case 'p':
			case 'q':
			case 'r':
			case 's':
			case 't':
			case 'u':
			case 'v':
			case 'w':
			case 'x':
			case 'y':
			case 'z':	goto yy66;
			case '[':	goto yy68;
			case ']':	goto yy70;
			case '^':	goto yy72;
			case '{':	goto yy74;
			case '|':	goto yy76;
			case '}':	goto yy78;
			case '~':	goto yy80;
			default:	goto yy12;
			}
yy10:
			++p_;
			{ --p_; return false; }
yy12:
			++p_;
yy13:
			{ --p_; error(err::syntax); return false; }
yy14:
			++p_;
			{ continue; }
yy16:
			++p_;
			{ tokens_.push_back(Token(TK_ENDL)); return true; }
yy18:
			++p_;
			switch ((yych = *p_)) {
			case '=':	goto yy82;
			default:	goto yy19;
			}
yy19:
			{ tokens_.push_back(Token(TK_EXCLAM)); return true; }
yy20:
			++p_;
			{ text_.clear(); squote = false; goto quote; }
yy22:
			++p_;
			{ tokens_.push_back(Token(TK_HASH)); return true; }
yy24:
			yych = *++p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy84;
			default:	goto yy13;
			}
yy25:
			++p_;
			switch ((yych = *p_)) {
			case '0':
			case '1':	goto yy87;
			default:	goto yy26;
			}
yy26:
			{ tokens_.push_back(Token(TK_PERCENT)); return true; }
yy27:
			++p_;
			switch ((yych = *p_)) {
			case '&':	goto yy90;
			default:	goto yy28;
			}
yy28:
			{ tokens_.push_back(Token(TK_AMPERSHAND)); return true; }
yy29:
			++p_;
			{ text_.clear(); squote = true;  goto quote; }
yy31:
			++p_;
			{ tokens_.push_back(Token(TK_LPAREN)); return true; }
yy33:
			++p_;
			{ tokens_.push_back(Token(TK_RPAREN)); return true; }
yy35:
			++p_;
			switch ((yych = *p_)) {
			case '*':	goto yy92;
			default:	goto yy36;
			}
yy36:
			{ tokens_.push_back(Token(TK_STAR)); return true; }
yy37:
			++p_;
			switch ((yych = *p_)) {
			case '+':	goto yy94;
			default:	goto yy38;
			}
yy38:
			{ tokens_.push_back(Token(TK_PLUS)); return true; }
yy39:
			++p_;
			{ tokens_.push_back(Token(TK_COMMA)); return true; }
yy41:
			++p_;
			switch ((yych = *p_)) {
			case '-':	goto yy96;
			default:	goto yy42;
			}
yy42:
			{ tokens_.push_back(Token(TK_MINUS)); return true; }
yy43:
			++p_;
			{ tokens_.push_back(Token(TK_DOT)); return true; }
yy45:
			++p_;
			{ tokens_.push_back(Token(TK_SLASH)); return true; }
yy47:
			yyaccept = 0;
			yych = *(marker_ = ++p_);
			switch (yych) {
			case 'B':
			case 'b':	goto yy101;
			case 'X':
			case 'x':	goto yy105;
			default:	goto yy50;
			}
yy48:
			{ tokens_.push_back(Token(TK_NUMBER, number(ts, 10))); return true; }
yy49:
			yyaccept = 0;
			marker_ = ++p_;
			yych = *p_;
yy50:
			switch (yych) {
			case '0':
			case '1':	goto yy49;
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':	goto yy51;
			case 'A':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy98;
			case 'B':
			case 'b':	goto yy106;
			case 'H':
			case 'h':	goto yy103;
			default:	goto yy48;
			}
yy51:
			yyaccept = 0;
			marker_ = ++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':	goto yy51;
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy98;
			case 'H':
			case 'h':	goto yy103;
			default:	goto yy48;
			}
yy53:
			++p_;
			{ tokens_.push_back(Token(TK_COLON)); return true; }
yy55:
			++p_;
			{ tokens_.push_back(Token(TK_ENDL)); flush(); return true; }
yy57:
			++p_;
			switch ((yych = *p_)) {
			case '<':	goto yy107;
			case '=':	goto yy109;
			case '>':	goto yy82;
			default:	goto yy58;
			}
yy58:
			{ tokens_.push_back(Token(TK_LESS)); return true; }
yy59:
			++p_;
			switch ((yych = *p_)) {
			case '=':	goto yy111;
			default:	goto yy60;
			}
yy60:
			{ tokens_.push_back(Token(TK_EQUAL)); return true; }
yy61:
			++p_;
			switch ((yych = *p_)) {
			case '=':	goto yy113;
			case '>':	goto yy115;
			default:	goto yy62;
			}
yy62:
			{ tokens_.push_back(Token(TK_GREATER)); return true; }
yy63:
			++p_;
			{ tokens_.push_back(Token(TK_QUESTION)); return true; }
yy65:
			yych = *++p_;
			switch (yych) {
			case '0':
			case '1':	goto yy87;
			default:	goto yy13;
			}
yy66:
			++p_;
			{ hash = ALNUM_HASH(yych); count = 1; goto ident; }
yy68:
			++p_;
			{ tokens_.push_back(Token(TK_LSQUARE)); return true; }
yy70:
			++p_;
			{ tokens_.push_back(Token(TK_RSQUARE)); return true; }
yy72:
			++p_;
			{ tokens_.push_back(Token(TK_CARET)); return true; }
yy74:
			++p_;
			{ tokens_.push_back(Token(TK_LCURLY)); return true; }
yy76:
			++p_;
			switch ((yych = *p_)) {
			case '|':	goto yy117;
			default:	goto yy77;
			}
yy77:
			{ tokens_.push_back(Token(TK_VBAR)); return true; }
yy78:
			++p_;
			{ tokens_.push_back(Token(TK_RCURLY)); return true; }
yy80:
			++p_;
			{ tokens_.push_back(Token(TK_TILDE)); return true; }
yy82:
			++p_;
			{ tokens_.push_back(Token(TK_NOT_EQUAL)); return true; }
yy84:
			++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy84;
			default:	goto yy86;
			}
yy86:
			{ tokens_.push_back(Token(TK_NUMBER, number(ts + 1, 16))); return true; }
yy87:
			++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':	goto yy87;
			default:	goto yy89;
			}
yy89:
			{ tokens_.push_back(Token(TK_NUMBER, number(ts + 1, 2))); return true; }
yy90:
			++p_;
			{ tokens_.push_back(Token(TK_AMPERSHAND2)); return true; }
yy92:
			++p_;
			{ tokens_.push_back(Token(TK_STAR2)); return true; }
yy94:
			++p_;
			{ tokens_.push_back(Token(TK_PLUS2)); return true; }
yy96:
			++p_;
			{ tokens_.push_back(Token(TK_MINUS2)); return true; }
yy98:
			++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy98;
			case 'H':
			case 'h':	goto yy103;
			default:	goto yy100;
			}
yy100:
			p_ = marker_;
			switch (yyaccept) {
			case 0: 	goto yy48;
			case 1: 	goto yy102;
			default:	goto yy121;
			}
yy101:
			yyaccept = 1;
			yych = *(marker_ = ++p_);
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'H':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':
			case 'h':	goto yy120;
			default:	goto yy102;
			}
yy102:
			{ tokens_.push_back(Token(TK_NUMBER, number(ts, 2))); return true; }
yy103:
			++p_;
			{ tokens_.push_back(Token(TK_NUMBER, number(ts, 16))); return true; }
yy105:
			yych = *++p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy122;
			default:	goto yy100;
			}
yy106:
			yyaccept = 1;
			yych = *(marker_ = ++p_);
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy98;
			case 'H':
			case 'h':	goto yy103;
			default:	goto yy102;
			}
yy107:
			++p_;
			{ tokens_.push_back(Token(TK_LESS2)); return true; }
yy109:
			++p_;
			{ tokens_.push_back(Token(TK_LESS_EQ)); return true; }
yy111:
			++p_;
			{ tokens_.push_back(Token(TK_EQUAL2)); return true; }
yy113:
			++p_;
			{ tokens_.push_back(Token(TK_GREATER_EQ)); return true; }
yy115:
			++p_;
			{ tokens_.push_back(Token(TK_GREATER2)); return true; }
yy117:
			++p_;
			{ tokens_.push_back(Token(TK_VBAR2)); return true; }
yy119:
			yyaccept = 2;
			marker_ = ++p_;
			yych = *p_;
yy120:
			switch (yych) {
			case '0':
			case '1':	goto yy119;
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy98;
			case 'H':
			case 'h':	goto yy103;
			default:	goto yy121;
			}
yy121:
			{ tokens_.push_back(Token(TK_NUMBER, number(ts + 2, 2))); return true; }
yy122:
			++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy122;
			default:	goto yy124;
			}
yy124:
			{ tokens_.push_back(Token(TK_NUMBER, number(ts + 2, 16))); return true; }
		}

	}
	assert(0);				// not reached

ident:
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'G':
			case 'H':
			case 'I':
			case 'J':
			case 'K':
			case 'L':
			case 'M':
			case 'N':
			case 'O':
			case 'P':
			case 'Q':
			case 'R':
			case 'S':
			case 'T':
			case 'U':
			case 'V':
			case 'W':
			case 'X':
			case 'Y':
			case 'Z':
			case '_':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':
			case 'g':
			case 'h':
			case 'i':
			case 'j':
			case 'k':
			case 'l':
			case 'm':
			case 'n':
			case 'o':
			case 'p':
			case 'q':
			case 'r':
			case 's':
			case 't':
			case 'u':
			case 'v':
			case 'w':
			case 'x':
			case 'y':
			case 'z':	goto yy129;
			default:	goto yy127;
			}
yy127:
			++p_;
			{ if (!(yych == '\'' && count == 2 && hash == KW_AF)) --p_;
							  tokens_.push_back(Token(TK_IDENT, hash, ts, p_)); return true; }
yy129:
			++p_;
			{ if (++count < 6) { hash += ALNUM_HASH(yych) << ((count - 1) * 6); } continue; }
		}

	}
	assert(0);				// not reached

quote:
	for (;;) {
		ts = p_;
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:
			case '\n':	goto yy133;
			case '"':	goto yy137;
			case '\'':	goto yy139;
			case '\\':	goto yy141;
			default:	goto yy135;
			}
yy133:
			++p_;
			{ --p_; error(err::missing_closing_quote); return false; }
yy135:
			++p_;
yy136:
			{ text_.push_back(yych); continue; }
yy137:
			++p_;
			{ if (!squote) {
								tokens_.push_back(Token(TK_STRING, 0, text_.c_str(), text_.c_str()+text_.length())); return true;
							  }
							  else { text_.push_back(yych); continue; }
							}
yy139:
			++p_;
			{ if (squote) {
								if (text_.length() != 1) { error(err::squoted_string); return false; }
								else { tokens_.push_back(Token(TK_NUMBER, text_[0])); return true; }
							  }
							  else { text_.push_back(yych); continue; }
							}
yy141:
			yych = *(marker_ = ++p_);
			switch (yych) {
			case '"':	goto yy142;
			case '\'':	goto yy144;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':	goto yy146;
			case '?':	goto yy149;
			case '\\':	goto yy151;
			case 'a':	goto yy153;
			case 'b':	goto yy155;
			case 'f':	goto yy157;
			case 'n':	goto yy159;
			case 'r':	goto yy161;
			case 't':	goto yy163;
			case 'v':	goto yy165;
			case 'x':	goto yy167;
			default:	goto yy136;
			}
yy142:
			++p_;
			{ text_.push_back('"'); continue; }
yy144:
			++p_;
			{ text_.push_back('\''); continue; }
yy146:
			++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':	goto yy146;
			default:	goto yy148;
			}
yy148:
			{ text_.push_back(number(ts + 1, 8)); continue; }
yy149:
			++p_;
			{ text_.push_back('?'); continue; }
yy151:
			++p_;
			{ text_.push_back('\\'); continue; }
yy153:
			++p_;
			{ text_.push_back('\a'); continue; }
yy155:
			++p_;
			{ text_.push_back('\b'); continue; }
yy157:
			++p_;
			{ text_.push_back('\f'); continue; }
yy159:
			++p_;
			{ text_.push_back('\n'); continue; }
yy161:
			++p_;
			{ text_.push_back('\r'); continue; }
yy163:
			++p_;
			{ text_.push_back('\t'); continue; }
yy165:
			++p_;
			{ text_.push_back('\v'); continue; }
yy167:
			yych = *++p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy169;
			default:	goto yy168;
			}
yy168:
			p_ = marker_;
			goto yy136;
yy169:
			++p_;
			yych = *p_;
			switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':	goto yy169;
			default:	goto yy171;
			}
yy171:
			{ text_.push_back(number(ts + 2, 16)); continue; }
		}

	}
	assert(0);				// not reached

	return false;			// keep compiler happy
}

bool Scanner::scan_filename() {
	const char* ts;

	text_.clear();
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:
			case '\n':
			case ';':	goto yy174;
			case '\t':
			case '\v':
			case '\f':
			case '\r':
			case ' ':	goto yy178;
			case '"':	goto yy180;
			case '\'':	goto yy182;
			case '<':	goto yy184;
			default:	goto yy176;
			}
yy174:
			++p_;
			{ p_--; goto end; }
yy176:
			++p_;
			{ ts = p_-1; goto word; }
yy178:
			++p_;
			{ continue; }
yy180:
			++p_;
			{ ts = p_; goto dquote; }
yy182:
			++p_;
			{ ts = p_; goto squote; }
yy184:
			++p_;
			{ ts = p_; goto angles; }
		}

	}
	assert(0);				// not reached

word:
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:
			case '\t':
			case '\n':
			case '\v':
			case '\f':
			case '\r':
			case ' ':
			case ';':	goto yy188;
			default:	goto yy190;
			}
yy188:
			++p_;
			{ p_--; text_ = std::string(ts, p_); goto end; }
yy190:
			++p_;
			{ continue; }
		}

	}
	assert(0);				// not reached

angles:
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:
			case '\n':	goto yy194;
			case '>':	goto yy198;
			default:	goto yy196;
			}
yy194:
			++p_;
			{ --p_; error(err::missing_closing_bracket); return false; }
yy196:
			++p_;
			{ continue; }
yy198:
			++p_;
			{ text_ = std::string(ts, p_-1); goto end; }
		}

	}
	assert(0);				// not reached

dquote:
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:
			case '\n':	goto yy202;
			case '"':	goto yy206;
			default:	goto yy204;
			}
yy202:
			++p_;
			{ --p_; error(err::missing_closing_quote); return false; }
yy204:
			++p_;
			{ continue; }
yy206:
			++p_;
			{ text_ = std::string(ts, p_-1); goto end; }
		}

	}
	assert(0);				// not reached

squote:
	for (;;) {
		
		{
			char yych;
			yych = *p_;
			switch (yych) {
			case 0x00:
			case '\n':	goto yy210;
			case '\'':	goto yy214;
			default:	goto yy212;
			}
yy210:
			++p_;
			{ --p_; error(err::missing_closing_quote); return false; }
yy212:
			++p_;
			{ continue; }
yy214:
			++p_;
			{ text_ = std::string(ts, p_-1); goto end; }
		}

	}
	assert(0);				// not reached

end:
	if (text_.empty()) {
		error(err::expected_file); 
		return false;
	}
	else {
		return true;
	}
}